1. enable autenticated read/writer on locations:

-- Fix RLS policies for locations table to allow basic operations
-- This migration ensures that authenticated users can read and write to locations table

-- Drop existing restrictive policies
DROP POLICY IF EXISTS "allow_all_authenticated_read" ON public.locations;
DROP POLICY IF EXISTS "allow_all_authenticated_write" ON public.locations;
DROP POLICY IF EXISTS "users_can_read_active_locations" ON public.locations;
DROP POLICY IF EXISTS "admins_managers_can_manage_locations" ON public.locations;
DROP POLICY IF EXISTS "admin_manager_manage_locations" ON public.locations;

-- Create simple, permissive policies for authenticated users
-- This allows any authenticated user to read locations
CREATE POLICY "authenticated_can_read_locations"
ON public.locations
FOR SELECT
TO authenticated
USING (true);

-- This allows any authenticated user to insert locations
CREATE POLICY "authenticated_can_insert_locations"
ON public.locations
FOR INSERT
TO authenticated
WITH CHECK (true);

-- This allows any authenticated user to update locations
CREATE POLICY "authenticated_can_update_locations"
ON public.locations
FOR UPDATE
TO authenticated
USING (true)
WITH CHECK (true);

-- This allows any authenticated user to delete locations
CREATE POLICY "authenticated_can_delete_locations"
ON public.locations
FOR DELETE
TO authenticated
USING (true);

-- Log the operation
DO $$
BEGIN
  RAISE NOTICE 'Fixed RLS policies for locations table - now allows all authenticated operations';
END $$;


2. Migrate Locations to bangalore: 

-- Update all existing locations to Bangalore-based addresses
-- This migration changes all outlet locations to Bangalore, Karnataka

-- Update existing locations to Bangalore
UPDATE public.locations 
SET 
  city = 'Bangalore',
  state = 'Karnataka',
  address = CASE 
    WHEN location_code = 'MAIN-WHSE-001' THEN '123 Electronic City, Phase 1'
    WHEN location_code = 'STORE-001' THEN '456 Brigade Road, MG Road'
    WHEN location_code = 'STORE-002' THEN '789 Koramangala, 5th Block'
    ELSE address
  END,
  pincode = CASE 
    WHEN location_code = 'MAIN-WHSE-001' THEN '560100'
    WHEN location_code = 'STORE-001' THEN '560001'
    WHEN location_code = 'STORE-002' THEN '560095'
    ELSE pincode
  END,
  phone = CASE 
    WHEN location_code = 'MAIN-WHSE-001' THEN '+91-80-2852-1234'
    WHEN location_code = 'STORE-001' THEN '+91-80-2558-1234'
    WHEN location_code = 'STORE-002' THEN '+91-80-2552-1234'
    ELSE phone
  END,
  email = CASE 
    WHEN location_code = 'MAIN-WHSE-001' THEN 'warehouse.blr@hybits.com'
    WHEN location_code = 'STORE-001' THEN 'downtown.blr@hybits.com'
    WHEN location_code = 'STORE-002' THEN 'koramangala.blr@hybits.com'
    ELSE email
  END,
  updated_at = NOW()
WHERE city != 'Bangalore' OR state != 'Karnataka';

-- Add additional Bangalore-based locations if they don't exist
INSERT INTO public.locations (
  id,
  location_code,
  name,
  address,
  city,
  state,
  pincode,
  phone,
  email,
  is_active,
  created_at,
  updated_at
) VALUES (
  gen_random_uuid(),
  'STORE-003',
  'Whitefield Store',
  '321 ITPL Main Road, Whitefield',
  'Bangalore',
  'Karnataka',
  '560066',
  '+91-80-2841-1234',
  'whitefield.blr@hybits.com',
  true,
  NOW(),
  NOW()
), (
  gen_random_uuid(),
  'STORE-004',
  'Indiranagar Store',
  '654 100 Feet Road, Indiranagar',
  'Bangalore',
  'Karnataka',
  '560038',
  '+91-80-2525-1234',
  'indiranagar.blr@hybits.com',
  true,
  NOW(),
  NOW()
), (
  gen_random_uuid(),
  'STORE-005',
  'JP Nagar Store',
  '987 JP Nagar 6th Phase',
  'Bangalore',
  'Karnataka',
  '560078',
  '+91-80-2653-1234',
  'jpnagar.blr@hybits.com',
  true,
  NOW(),
  NOW()
) ON CONFLICT (location_code) DO NOTHING;

-- Log the update
DO $$
BEGIN
  RAISE NOTICE 'Updated all locations to Bangalore-based addresses';
  RAISE NOTICE 'Added additional Bangalore locations: Whitefield, Indiranagar, JP Nagar';
END $$;


3. rental orders event fields and constraints:

-- ============================================================================
-- ADD MISSING ORDER COLUMNS
-- ============================================================================

-- Add missing columns to rental_orders table
ALTER TABLE public.rental_orders 
ADD COLUMN IF NOT EXISTS event_duration INTEGER DEFAULT 0,
ADD COLUMN IF NOT EXISTS event_type TEXT DEFAULT 'other',
ADD COLUMN IF NOT EXISTS guest_count INTEGER DEFAULT 0,
ADD COLUMN IF NOT EXISTS location_type TEXT DEFAULT 'indoor';

-- Add constraints for the new columns
ALTER TABLE public.rental_orders 
ADD CONSTRAINT check_event_duration CHECK (event_duration >= 0),
ADD CONSTRAINT check_guest_count CHECK (guest_count >= 0),
ADD CONSTRAINT check_event_type CHECK (event_type IN ('wedding', 'corporate', 'birthday', 'anniversary', 'other')),
ADD CONSTRAINT check_location_type CHECK (location_type IN ('indoor', 'outdoor', 'both'));

-- Add indexes for better performance
CREATE INDEX IF NOT EXISTS idx_rental_orders_event_type ON public.rental_orders(event_type);
CREATE INDEX IF NOT EXISTS idx_rental_orders_location_type ON public.rental_orders(location_type);
CREATE INDEX IF NOT EXISTS idx_rental_orders_event_duration ON public.rental_orders(event_duration);


4. Inventory image storage policies:

-- Manual Storage Policies Setup for Inventory Images
-- Run these commands in the Supabase SQL Editor or Dashboard

-- First, ensure the bucket exists (run the migration first)
-- Then run these policies:

-- Allow authenticated users to upload images
CREATE POLICY "Allow authenticated users to upload inventory images"
ON storage.objects FOR INSERT
TO authenticated
WITH CHECK (bucket_id = 'inventory-images');

-- Allow authenticated users to view images
CREATE POLICY "Allow authenticated users to view inventory images"
ON storage.objects FOR SELECT
TO authenticated
USING (bucket_id = 'inventory-images');

-- Allow authenticated users to update images
CREATE POLICY "Allow authenticated users to update inventory images"
ON storage.objects FOR UPDATE
TO authenticated
USING (bucket_id = 'inventory-images');

-- Allow authenticated users to delete images
CREATE POLICY "Allow authenticated users to delete inventory images"
ON storage.objects FOR DELETE
TO authenticated
USING (bucket_id = 'inventory-images');

-- Alternative: If you want public access to view images (for public bucket)
-- CREATE POLICY "Allow public access to view inventory images"
-- ON storage.objects FOR SELECT
-- TO public
-- USING (bucket_id = 'inventory-images');


5. inventory images storage bucket:

-- Set up Supabase Storage for inventory images
-- This migration creates the storage bucket

-- Create storage bucket for inventory images
INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
VALUES (
  'inventory-images',
  'inventory-images',
  true,
  5242880, -- 5MB limit
  ARRAY['image/jpeg', 'image/png', 'image/webp']
)
ON CONFLICT (id) DO NOTHING;


6. inventory item image support:

-- Add image support to inventory items
-- This migration adds image URL fields to the inventory_items table

-- Add image fields to inventory_items table
ALTER TABLE public.inventory_items 
ADD COLUMN image_url TEXT,
ADD COLUMN thumbnail_url TEXT,
ADD COLUMN image_alt_text TEXT;

-- Add index for better performance when filtering by items with/without images
CREATE INDEX idx_inventory_items_has_image ON public.inventory_items(image_url) WHERE image_url IS NOT NULL;

-- Add comment for documentation
COMMENT ON COLUMN public.inventory_items.image_url IS 'URL to the main image of the inventory item stored in Supabase Storage';
COMMENT ON COLUMN public.inventory_items.thumbnail_url IS 'URL to the thumbnail version of the image for faster loading';
COMMENT ON COLUMN public.inventory_items.image_alt_text IS 'Alt text for accessibility and SEO purposes';


7. multi-location support migration:

-- Multi-Location Support Migration
-- This migration adds comprehensive multi-location support to the Hybits CRM system

-- 1. Create locations table
CREATE TABLE public.locations (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    location_code TEXT NOT NULL UNIQUE,
    name TEXT NOT NULL,
    address TEXT NOT NULL,
    city TEXT NOT NULL,
    state TEXT NOT NULL,
    pincode TEXT NOT NULL,
    phone TEXT,
    email TEXT,
    gstin TEXT,
    manager_id UUID REFERENCES public.user_profiles(id) ON DELETE SET NULL,
    is_active BOOLEAN DEFAULT true,
    settings JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- 2. Create location_users junction table for access control
CREATE TABLE public.location_users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    location_id UUID REFERENCES public.locations(id) ON DELETE CASCADE,
    user_id UUID REFERENCES public.user_profiles(id) ON DELETE CASCADE,
    role TEXT NOT NULL DEFAULT 'manager', -- 'manager', 'viewer'
    permissions JSONB DEFAULT '{}',
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(location_id, user_id)
);

-- 3. Add location_id to existing tables
ALTER TABLE public.inventory_items 
ADD COLUMN location_id UUID REFERENCES public.locations(id) ON DELETE SET NULL;

ALTER TABLE public.customers 
ADD COLUMN primary_location_id UUID REFERENCES public.locations(id) ON DELETE SET NULL;

ALTER TABLE public.rental_orders 
ADD COLUMN location_id UUID REFERENCES public.locations(id) ON DELETE SET NULL;

ALTER TABLE public.invoices 
ADD COLUMN location_id UUID REFERENCES public.locations(id) ON DELETE SET NULL;

ALTER TABLE public.payments 
ADD COLUMN location_id UUID REFERENCES public.locations(id) ON DELETE SET NULL;

ALTER TABLE public.stock_movements 
ADD COLUMN location_id UUID REFERENCES public.locations(id) ON DELETE SET NULL;

-- 4. Create indexes for performance
CREATE INDEX idx_locations_location_code ON public.locations(location_code);
CREATE INDEX idx_locations_city ON public.locations(city);
CREATE INDEX idx_locations_state ON public.locations(state);
CREATE INDEX idx_location_users_location_id ON public.location_users(location_id);
CREATE INDEX idx_location_users_user_id ON public.location_users(user_id);
CREATE INDEX idx_inventory_items_location_id ON public.inventory_items(location_id);
CREATE INDEX idx_rental_orders_location_id ON public.rental_orders(location_id);
CREATE INDEX idx_invoices_location_id ON public.invoices(location_id);

-- 5. Create functions for location-based access control
CREATE OR REPLACE FUNCTION public.get_user_locations(user_uuid UUID)
RETURNS TABLE(location_id UUID, location_name TEXT, role TEXT)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    RETURN QUERY
    SELECT 
        l.id,
        l.name,
        lu.role
    FROM public.locations l
    JOIN public.location_users lu ON l.id = lu.location_id
    WHERE lu.user_id = user_uuid 
    AND lu.is_active = true 
    AND l.is_active = true;
END;
$$;

-- 6. Create function to check if user has access to location
CREATE OR REPLACE FUNCTION public.user_has_location_access(user_uuid UUID, target_location_id UUID)
RETURNS BOOLEAN
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    RETURN EXISTS(
        SELECT 1 
        FROM public.location_users 
        WHERE user_id = user_uuid 
        AND location_id = target_location_id 
        AND is_active = true
    );
END;
$$;

-- 7. Create RLS policies for multi-location access
ALTER TABLE public.locations ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.location_users ENABLE ROW LEVEL SECURITY;

-- Locations: Users can see locations they have access to
CREATE POLICY "users_can_view_accessible_locations" ON public.locations
FOR SELECT USING (
    EXISTS(
        SELECT 1 FROM public.location_users 
        WHERE location_id = locations.id 
        AND user_id = auth.uid()
        AND is_active = true
    )
);

-- Location users: Users can see their own location assignments
CREATE POLICY "users_can_view_own_location_assignments" ON public.location_users
FOR SELECT USING (user_id = auth.uid());

-- 8. Insert default location data
INSERT INTO public.locations (location_code, name, address, city, state, pincode, phone, email) VALUES
('LOC001', 'Main Warehouse', '123 Industrial Area', 'Bangalore', 'Karnataka', '560001', '+91-80-12345678', 'main@hybits.com'),
('LOC002', 'Branch Office - Mumbai', '456 Business Park', 'Mumbai', 'Maharashtra', '400001', '+91-22-87654321', 'mumbai@hybits.com'),
('LOC003', 'Branch Office - Delhi', '789 Commercial Complex', 'Delhi', 'Delhi', '110001', '+91-11-11223344', 'delhi@hybits.com');

-- Note: User roles per location are limited to 'manager' and 'viewer' only

-- 9. Update existing inventory items to reference main location
UPDATE public.inventory_items 
SET location_id = (SELECT id FROM public.locations WHERE location_code = 'LOC001')
WHERE location_id IS NULL;

-- 10. Create view for location-based inventory summary
CREATE VIEW public.location_inventory_summary AS
SELECT 
    l.id as location_id,
    l.name as location_name,
    l.location_code,
    COUNT(ii.id) as total_items,
    SUM(ii.total_quantity) as total_stock,
    SUM(ii.available_quantity) as available_stock,
    SUM(ii.reserved_quantity) as reserved_stock,
    COUNT(CASE WHEN ii.available_quantity <= ii.reorder_point THEN 1 END) as low_stock_items
FROM public.locations l
LEFT JOIN public.inventory_items ii ON l.id = ii.location_id
WHERE l.is_active = true
GROUP BY l.id, l.name, l.location_code;

-- 11. Create view for location-based financial summary
CREATE VIEW public.location_financial_summary AS
SELECT 
    l.id as location_id,
    l.name as location_name,
    l.location_code,
    COUNT(DISTINCT ro.id) as total_orders,
    SUM(ro.total_amount) as total_revenue,
    COUNT(DISTINCT i.id) as total_invoices,
    SUM(i.total_amount) as total_invoiced_amount,
    SUM(p.amount) as total_payments_received
FROM public.locations l
LEFT JOIN public.rental_orders ro ON l.id = ro.location_id
LEFT JOIN public.invoices i ON l.id = i.location_id
LEFT JOIN public.payments p ON l.id = p.location_id
WHERE l.is_active = true
GROUP BY l.id, l.name, l.location_code;


8. hybits rental management schema: 

-- Location: supabase/migrations/20250804100622_hybits_rental_management_system.sql
-- Schema Analysis: Fresh project - no existing schema
-- Integration Type: Complete rental management system for Hybits company
-- Dependencies: Auth users for user relationships

-- 1. Custom Types
CREATE TYPE public.user_role AS ENUM ('admin', 'manager');
CREATE TYPE public.item_category AS ENUM ('plates', 'cups', 'glasses', 'cutlery', 'bowls', 'serving_dishes');
CREATE TYPE public.item_condition AS ENUM ('excellent', 'good', 'fair', 'damaged', 'out_of_service');
CREATE TYPE public.customer_type AS ENUM ('individual', 'corporate', 'event_company', 'restaurant');
CREATE TYPE public.order_status AS ENUM ('pending', 'confirmed', 'items_dispatched', 'items_returned', 'completed', 'cancelled');
CREATE TYPE public.payment_status AS ENUM ('pending', 'partial', 'paid', 'overdue');
CREATE TYPE public.invoice_type AS ENUM ('rental', 'security_deposit', 'damage_charges', 'late_fee');
CREATE TYPE public.gst_rate AS ENUM ('0', '5', '12', '18', '28');
CREATE TYPE public.payment_method AS ENUM ('cash', 'cheque', 'bank_transfer', 'upi', 'card', 'online');

-- 2. Core Tables

-- User profiles table (intermediary for auth relationships)
CREATE TABLE public.user_profiles (
    id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    email TEXT NOT NULL UNIQUE,
    full_name TEXT NOT NULL,
    role public.user_role DEFAULT 'manager'::public.user_role,
    phone TEXT,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- Inventory items
CREATE TABLE public.inventory_items (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    item_code TEXT NOT NULL UNIQUE,
    name TEXT NOT NULL,
    category public.item_category NOT NULL,
    description TEXT,
    rental_price_per_day DECIMAL(10,2) NOT NULL,
    security_deposit DECIMAL(10,2) DEFAULT 0,
    total_quantity INTEGER NOT NULL DEFAULT 0,
    available_quantity INTEGER NOT NULL DEFAULT 0,
    reserved_quantity INTEGER NOT NULL DEFAULT 0,
    condition public.item_condition DEFAULT 'excellent'::public.item_condition,
    location TEXT DEFAULT 'Main Warehouse',
    reorder_point INTEGER DEFAULT 10,
    supplier TEXT,
    unit_cost DECIMAL(10,2),
    created_by UUID REFERENCES public.user_profiles(id) ON DELETE SET NULL,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- Customers
CREATE TABLE public.customers (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    customer_code TEXT NOT NULL UNIQUE,
    company_name TEXT,
    contact_person TEXT NOT NULL,
    phone TEXT NOT NULL,
    email TEXT,
    address TEXT NOT NULL,
    gstin TEXT,
    customer_type public.customer_type DEFAULT 'individual'::public.customer_type,
    credit_limit DECIMAL(10,2) DEFAULT 0,
    outstanding_balance DECIMAL(10,2) DEFAULT 0,
    is_active BOOLEAN DEFAULT true,
    notes TEXT,
    created_by UUID REFERENCES public.user_profiles(id) ON DELETE SET NULL,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- Rental orders
CREATE TABLE public.rental_orders (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    order_number TEXT NOT NULL UNIQUE,
    customer_id UUID REFERENCES public.customers(id) ON DELETE CASCADE,
    event_date DATE NOT NULL,
    delivery_date DATE NOT NULL,
    return_date DATE NOT NULL,
    delivery_address TEXT NOT NULL,
    total_amount DECIMAL(10,2) NOT NULL DEFAULT 0,
    security_deposit DECIMAL(10,2) NOT NULL DEFAULT 0,
    gst_amount DECIMAL(10,2) NOT NULL DEFAULT 0,
    status public.order_status DEFAULT 'pending'::public.order_status,
    payment_status public.payment_status DEFAULT 'pending'::public.payment_status,
    notes TEXT,
    created_by UUID REFERENCES public.user_profiles(id) ON DELETE SET NULL,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- Rental order items
CREATE TABLE public.rental_order_items (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    order_id UUID REFERENCES public.rental_orders(id) ON DELETE CASCADE,
    item_id UUID REFERENCES public.inventory_items(id) ON DELETE CASCADE,
    quantity INTEGER NOT NULL,
    rental_days INTEGER NOT NULL,
    unit_price DECIMAL(10,2) NOT NULL,
    total_price DECIMAL(10,2) NOT NULL,
    returned_quantity INTEGER DEFAULT 0,
    damaged_quantity INTEGER DEFAULT 0,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- Invoices
CREATE TABLE public.invoices (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    invoice_number TEXT NOT NULL UNIQUE,
    order_id UUID REFERENCES public.rental_orders(id) ON DELETE CASCADE,
    customer_id UUID REFERENCES public.customers(id) ON DELETE CASCADE,
    invoice_type public.invoice_type DEFAULT 'rental'::public.invoice_type,
    invoice_date DATE NOT NULL DEFAULT CURRENT_DATE,
    due_date DATE NOT NULL,
    subtotal DECIMAL(10,2) NOT NULL DEFAULT 0,
    gst_rate public.gst_rate DEFAULT '18'::public.gst_rate,
    gst_amount DECIMAL(10,2) NOT NULL DEFAULT 0,
    total_amount DECIMAL(10,2) NOT NULL DEFAULT 0,
    payment_received DECIMAL(10,2) DEFAULT 0,
    balance_due DECIMAL(10,2) DEFAULT 0,
    is_paid BOOLEAN DEFAULT false,
    created_by UUID REFERENCES public.user_profiles(id) ON DELETE SET NULL,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- Invoice items
CREATE TABLE public.invoice_items (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    invoice_id UUID REFERENCES public.invoices(id) ON DELETE CASCADE,
    item_id UUID REFERENCES public.inventory_items(id) ON DELETE CASCADE,
    description TEXT NOT NULL,
    quantity INTEGER NOT NULL,
    unit_price DECIMAL(10,2) NOT NULL,
    total_price DECIMAL(10,2) NOT NULL,
    gst_rate public.gst_rate DEFAULT '18'::public.gst_rate,
    gst_amount DECIMAL(10,2) NOT NULL DEFAULT 0,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- Payments
CREATE TABLE public.payments (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    payment_number TEXT NOT NULL UNIQUE,
    invoice_id UUID REFERENCES public.invoices(id) ON DELETE CASCADE,
    customer_id UUID REFERENCES public.customers(id) ON DELETE CASCADE,
    payment_date DATE NOT NULL DEFAULT CURRENT_DATE,
    amount DECIMAL(10,2) NOT NULL,
    payment_method public.payment_method NOT NULL,
    reference_number TEXT,
    notes TEXT,
    created_by UUID REFERENCES public.user_profiles(id) ON DELETE SET NULL,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- Stock movements (for tracking inventory changes)
CREATE TABLE public.stock_movements (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    item_id UUID REFERENCES public.inventory_items(id) ON DELETE CASCADE,
    movement_type TEXT NOT NULL, -- 'in', 'out', 'adjustment', 'damage', 'return'
    quantity INTEGER NOT NULL,
    reference_type TEXT, -- 'order', 'adjustment', 'purchase'
    reference_id UUID,
    notes TEXT,
    created_by UUID REFERENCES public.user_profiles(id) ON DELETE SET NULL,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- 3. Indexes
CREATE INDEX idx_user_profiles_email ON public.user_profiles(email);
CREATE INDEX idx_inventory_items_category ON public.inventory_items(category);
CREATE INDEX idx_inventory_items_location ON public.inventory_items(location);
CREATE INDEX idx_inventory_items_condition ON public.inventory_items(condition);
CREATE INDEX idx_customers_customer_type ON public.customers(customer_type);
CREATE INDEX idx_customers_phone ON public.customers(phone);
CREATE INDEX idx_rental_orders_customer_id ON public.rental_orders(customer_id);
CREATE INDEX idx_rental_orders_status ON public.rental_orders(status);
CREATE INDEX idx_rental_orders_event_date ON public.rental_orders(event_date);
CREATE INDEX idx_rental_order_items_order_id ON public.rental_order_items(order_id);
CREATE INDEX idx_rental_order_items_item_id ON public.rental_order_items(item_id);
CREATE INDEX idx_invoices_customer_id ON public.invoices(customer_id);
CREATE INDEX idx_invoices_invoice_date ON public.invoices(invoice_date);
CREATE INDEX idx_invoices_is_paid ON public.invoices(is_paid);
CREATE INDEX idx_payments_customer_id ON public.payments(customer_id);
CREATE INDEX idx_payments_payment_date ON public.payments(payment_date);
CREATE INDEX idx_stock_movements_item_id ON public.stock_movements(item_id);
CREATE INDEX idx_stock_movements_created_at ON public.stock_movements(created_at);

-- 4. Enable RLS
ALTER TABLE public.user_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.inventory_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.customers ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.rental_orders ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.rental_order_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.invoices ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.invoice_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.payments ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.stock_movements ENABLE ROW LEVEL SECURITY;

-- 5. Helper Functions
CREATE OR REPLACE FUNCTION public.is_admin_from_auth()
RETURNS BOOLEAN
LANGUAGE sql
STABLE
SECURITY DEFINER
AS $$
SELECT EXISTS (
    SELECT 1 FROM auth.users au
    WHERE au.id = auth.uid() 
    AND (au.raw_user_meta_data->>'role' = 'admin' 
         OR au.raw_app_meta_data->>'role' = 'admin')
)
$$;

CREATE OR REPLACE FUNCTION public.has_role(required_role TEXT)
RETURNS BOOLEAN
LANGUAGE sql
STABLE
SECURITY DEFINER
AS $$
SELECT EXISTS (
    SELECT 1 FROM public.user_profiles up
    WHERE up.id = auth.uid() AND up.role::TEXT = required_role
)
$$;

-- 6. RLS Policies

-- User profiles - Pattern 1: Core user table
CREATE POLICY "users_manage_own_user_profiles"
ON public.user_profiles
FOR ALL
TO authenticated
USING (id = auth.uid())
WITH CHECK (id = auth.uid());

-- Admin can view all profiles
CREATE POLICY "admin_full_access_user_profiles"
ON public.user_profiles
FOR ALL
TO authenticated
USING (public.is_admin_from_auth())
WITH CHECK (public.is_admin_from_auth());

-- Inventory items - Public read, authenticated write with role check
CREATE POLICY "public_can_read_inventory_items"
ON public.inventory_items
FOR SELECT
TO public
USING (true);

CREATE POLICY "authenticated_manage_inventory_items"
ON public.inventory_items
FOR ALL
TO authenticated
USING (public.has_role('admin') OR public.has_role('manager'))
WITH CHECK (public.has_role('admin') OR public.has_role('manager'));

-- Customers - Authenticated users can manage
CREATE POLICY "authenticated_manage_customers"
ON public.customers
FOR ALL
TO authenticated
USING (public.has_role('admin') OR public.has_role('manager'))
WITH CHECK (public.has_role('admin') OR public.has_role('manager'));

-- Rental orders - Authenticated users can manage
CREATE POLICY "authenticated_manage_rental_orders"
ON public.rental_orders
FOR ALL
TO authenticated
USING (public.has_role('admin') OR public.has_role('manager'))
WITH CHECK (public.has_role('admin') OR public.has_role('manager'));

-- Rental order items - Authenticated users can manage
CREATE POLICY "authenticated_manage_rental_order_items"
ON public.rental_order_items
FOR ALL
TO authenticated
USING (public.has_role('admin') OR public.has_role('manager'))
WITH CHECK (public.has_role('admin') OR public.has_role('manager'));

-- Invoices - Authenticated users can manage
CREATE POLICY "authenticated_manage_invoices"
ON public.invoices
FOR ALL
TO authenticated
USING (public.has_role('admin') OR public.has_role('manager') OR public.has_role('accountant'))
WITH CHECK (public.has_role('admin') OR public.has_role('manager') OR public.has_role('accountant'));

-- Invoice items - Authenticated users can manage
CREATE POLICY "authenticated_manage_invoice_items"
ON public.invoice_items
FOR ALL
TO authenticated
USING (public.has_role('admin') OR public.has_role('manager') OR public.has_role('accountant'))
WITH CHECK (public.has_role('admin') OR public.has_role('manager') OR public.has_role('accountant'));

-- Payments - Authenticated users can manage
CREATE POLICY "authenticated_manage_payments"
ON public.payments
FOR ALL
TO authenticated
USING (public.has_role('admin') OR public.has_role('manager') OR public.has_role('accountant'))
WITH CHECK (public.has_role('admin') OR public.has_role('manager') OR public.has_role('accountant'));

-- Stock movements - Authenticated users can manage
CREATE POLICY "authenticated_manage_stock_movements"
ON public.stock_movements
FOR ALL
TO authenticated
USING (public.has_role('admin') OR public.has_role('manager'))
WITH CHECK (public.has_role('admin') OR public.has_role('manager'));

-- 7. Functions for automatic profile creation
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
SECURITY DEFINER
LANGUAGE plpgsql
AS $$
BEGIN
  INSERT INTO public.user_profiles (id, email, full_name, role)
  VALUES (
    NEW.id, 
    NEW.email, 
    COALESCE(NEW.raw_user_meta_data->>'full_name', split_part(NEW.email, '@', 1)),
    COALESCE(NEW.raw_user_meta_data->>'role', 'manager')::public.user_role
  );  
  RETURN NEW;
END;
$$;

-- Trigger for new user creation
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- 8. Update functions for inventory
CREATE OR REPLACE FUNCTION public.update_inventory_quantities()
RETURNS TRIGGER
SECURITY DEFINER
LANGUAGE plpgsql
AS $$
BEGIN
  -- Update available quantity when reserved changes
  UPDATE public.inventory_items 
  SET available_quantity = total_quantity - reserved_quantity,
      updated_at = CURRENT_TIMESTAMP
  WHERE id = NEW.item_id;
  
  RETURN NEW;
END;
$$;

-- 9. Mock Data
DO $$
DECLARE
    admin_uuid UUID := gen_random_uuid();
    manager_uuid UUID := gen_random_uuid();
    customer1_uuid UUID := gen_random_uuid();
    customer2_uuid UUID := gen_random_uuid();
    item1_uuid UUID := gen_random_uuid();
    item2_uuid UUID := gen_random_uuid();
    item3_uuid UUID := gen_random_uuid();
    item4_uuid UUID := gen_random_uuid();
    item5_uuid UUID := gen_random_uuid();
    order1_uuid UUID := gen_random_uuid();
BEGIN
    -- Create auth users with required fields
    INSERT INTO auth.users (
        id, instance_id, aud, role, email, encrypted_password, email_confirmed_at,
        created_at, updated_at, raw_user_meta_data, raw_app_meta_data,
        is_sso_user, is_anonymous, confirmation_token, confirmation_sent_at,
        recovery_token, recovery_sent_at, email_change_token_new, email_change,
        email_change_sent_at, email_change_token_current, email_change_confirm_status,
        reauthentication_token, reauthentication_sent_at, phone, phone_change,
        phone_change_token, phone_change_sent_at
    ) VALUES
        (admin_uuid, '00000000-0000-0000-0000-000000000000', 'authenticated', 'authenticated',
         'admin@hybits.in', crypt('admin123', gen_salt('bf', 10)), now(), now(), now(),
         '{"full_name": "Rajesh Kumar", "role": "admin"}'::jsonb, '{"provider": "email", "providers": ["email"]}'::jsonb,
         false, false, '', null, '', null, '', '', null, '', 0, '', null, null, '', '', null),
        (manager_uuid, '00000000-0000-0000-0000-000000000000', 'authenticated', 'authenticated',
         'manager@hybits.in', crypt('manager123', gen_salt('bf', 10)), now(), now(), now(),
         '{"full_name": "Priya Sharma", "role": "manager"}'::jsonb, '{"provider": "email", "providers": ["email"]}'::jsonb,
         false, false, '', null, '', null, '', '', null, '', 0, '', null, null, '', '', null);

    -- Create customers
    INSERT INTO public.customers (id, customer_code, company_name, contact_person, phone, email, address, gstin, customer_type) VALUES
        (customer1_uuid, 'CUST-001', 'Golden Banquet Hall', 'Suresh Gupta', '+91-9876543210', 'suresh@goldenbanquet.com', '123 Wedding Street, Delhi 110001', '07AAACG1234F1Z5', 'corporate'::public.customer_type),
        (customer2_uuid, 'CUST-002', 'Raj Catering Services', 'Meera Singh', '+91-9876543211', 'meera@rajcatering.com', '456 Food Plaza, Mumbai 400001', '27AAACR5678G1Z3', 'event_company'::public.customer_type);

    -- Create inventory items
    INSERT INTO public.inventory_items (id, item_code, name, category, description, rental_price_per_day, security_deposit, total_quantity, available_quantity, condition, location, reorder_point, supplier, unit_cost, created_by) VALUES
        (item1_uuid, 'PLT-001', 'Dinner Plates - Large', 'plates'::public.item_category, 'Premium ceramic dinner plates, 12 inch diameter', 5.00, 2.00, 100, 85, 'good'::public.item_condition, 'Main Warehouse', 20, 'Ceramic Works Ltd', 150.00, admin_uuid),
        (item2_uuid, 'CUP-001', 'Tea Cups - Standard', 'cups'::public.item_category, 'White porcelain tea cups with saucers', 3.00, 1.50, 50, 42, 'good'::public.item_condition, 'Main Warehouse', 15, 'Porcelain India', 75.00, admin_uuid),
        (item3_uuid, 'GLS-001', 'Water Glasses', 'glasses'::public.item_category, 'Clear glass water glasses, 250ml capacity', 2.00, 1.00, 80, 80, 'excellent'::public.item_condition, 'Main Warehouse', 25, 'Glass Craft Co', 45.00, admin_uuid),
        (item4_uuid, 'CUT-001', 'Stainless Steel Cutlery Set', 'cutlery'::public.item_category, 'Complete cutlery set with fork, knife, spoon', 8.00, 3.00, 200, 170, 'excellent'::public.item_condition, 'Delhi Branch', 50, 'Steel Works India', 200.00, admin_uuid),
        (item5_uuid, 'BWL-001', 'Serving Bowls - Medium', 'bowls'::public.item_category, 'Ceramic serving bowls for curry and rice', 4.00, 2.00, 60, 52, 'good'::public.item_condition, 'Bangalore Hub', 30, 'Ceramic Works Ltd', 120.00, admin_uuid);

    -- Create a sample rental order
    INSERT INTO public.rental_orders (id, order_number, customer_id, event_date, delivery_date, return_date, delivery_address, total_amount, security_deposit, gst_amount, status, created_by) VALUES
        (order1_uuid, 'ORD-001', customer1_uuid, '2025-01-15', '2025-01-14', '2025-01-16', '123 Wedding Street, Delhi 110001', 1180.00, 200.00, 180.00, 'confirmed'::public.order_status, admin_uuid);

    -- Create rental order items
    INSERT INTO public.rental_order_items (order_id, item_id, quantity, rental_days, unit_price, total_price) VALUES
        (order1_uuid, item1_uuid, 50, 2, 5.00, 500.00),
        (order1_uuid, item2_uuid, 25, 2, 3.00, 150.00),
        (order1_uuid, item3_uuid, 50, 2, 2.00, 200.00),
        (order1_uuid, item4_uuid, 25, 2, 8.00, 400.00);

    -- Update reserved quantities
    UPDATE public.inventory_items SET reserved_quantity = 15, available_quantity = 70 WHERE id = item1_uuid;
    UPDATE public.inventory_items SET reserved_quantity = 8, available_quantity = 34 WHERE id = item2_uuid;
    UPDATE public.inventory_items SET reserved_quantity = 30, available_quantity = 140 WHERE id = item4_uuid;
    UPDATE public.inventory_items SET reserved_quantity = 8, available_quantity = 44 WHERE id = item5_uuid;

END $$;
